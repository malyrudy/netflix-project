{"ast":null,"code":"var _jsxFileName = \"/Users/lukasrucky/Documents/GitHub/netflix-project/src/components/MovieSlider.js\",\n  _s = $RefreshSig$();\n// import \"../components/MovieSlider.css\"\n// import allMovies from \"../data\"\n// import { useState } from \"react\"\n// import categories from \"./categories\"\n// import { FaArrowCircleLeft, FaArrowCircleRight } from 'react-icons/fa';\n\n// const MovieSlider = (props) => {\n//     const [typeOfMovie, setTypeOfMovie] = useState(props.categoryOfMovies)\n//     console.log(props);\n\n//     const vysledneFilmy = allMovies.filter((oneMovie) => {\n//         return oneMovie[\"category\"].includes(typeOfMovie)\n//     })\n\n//     const initSlider = () => {\n//         const slideButtons = document.querySelectorAll(\".arrow-button\");\n//         const imageList = document.querySelector(\".movies-list\");\n//         const maxScrollLeft = imageList.scrollWidth - imageList.clientWidth;\n\n//         // Slide images according to slide buttons click\n//         slideButtons.forEach(button => {\n//             button.addEventListener(\"click\", () => {\n//                 const direction = button.id === \"prev-slide\" ? -1 : 1;\n//                 const scrollAmount = imageList.clientWidth * direction;\n//                 imageList.scrollBy({ left: scrollAmount, behavior: \"smooth\"})\n//             })\n//         })\n//         // Hiding the buttons\n//         const handleSlideButtons = () => {\n//             slideButtons[0].style.display = imageList.scrollLeft <= 0 ? \"none\" : \"block\";\n//             slideButtons[1].style.display = imageList.scrollLeft >= maxScrollLeft ? \"none\" : \"block\";\n//         }\n//         // update position of scrollbar \n//         imageList.addEventListener(\"scroll\", () => {\n//             handleSlideButtons();\n//         })\n//     }\n\n//     window.addEventListener(\"load\", initSlider)\n\n//     return <div className=\"movies-slider\">\n//         <div className=\"one-button\">\n//             {\n//                 categories.filter((oneCategory, index) => {\n//                     return oneCategory === props.categoryOfMovies\n//                 })\n//                 // categories.map((oneCategory, index) => {\n//                 //     return <button className=\"one-button\" key={index} onClick={()=> setTypeOfMovie(oneCategory)}>{oneCategory}</button>\n//                 // })\n//             }\n//         </div>\n//         <div className=\"slider-wrapper\">\n//             <FaArrowCircleLeft id=\"prev-slide\" className=\"arrow-button arrow-left\"/>\n//             <div className=\"movies-list\">\n//                 {\n//                     vysledneFilmy.map((oneMovie) => {\n//                         const {id, image, title, age, tags, description, category} = oneMovie\n\n//                         return <img className=\"one-movie\" src={image} alt=\"movie-image\" key={id}/>\n//                     })\n//                 }\n//             </div>\n//             <FaArrowCircleRight className=\"arrow-button arrow-right\" />\n\n//         </div>\n\n//     </div>\n// }\n\n// export default MovieSlider\n\nimport \"../components/MovieSlider.css\";\nimport allMovies from \"../data\";\nimport { useState, useEffect } from \"react\";\nimport categories from \"./categories\";\nimport { FaArrowCircleLeft, FaArrowCircleRight } from 'react-icons/fa';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MovieSlider = props => {\n  _s();\n  const [typeOfMovie, setTypeOfMovie] = useState(props.categoryOfMovies);\n  const [scrollLeft, setScrollLeft] = useState(0);\n  const [maxScrollLeft, setMaxScrollLeft] = useState(0);\n  const vysledneFilmy = allMovies.filter(oneMovie => {\n    return oneMovie[\"category\"].includes(typeOfMovie);\n  });\n  useEffect(() => {\n    const imageList = document.querySelector(\".movies-list\");\n    setMaxScrollLeft(imageList.scrollWidth - imageList.clientWidth);\n    const handleSlideButtons = () => {\n      setScrollLeft(imageList.scrollLeft);\n    };\n    const initSlider = () => {\n      const slideButtons = document.querySelectorAll(\".arrow-button\");\n      slideButtons.forEach(button => {\n        button.addEventListener(\"click\", () => {\n          const direction = button.id === \"prev-slide\" ? -1 : 1;\n          const scrollAmount = imageList.clientWidth * direction;\n          imageList.scrollBy({\n            left: scrollAmount,\n            behavior: \"smooth\"\n          });\n        });\n      });\n\n      // Hiding the buttons\n      handleSlideButtons();\n\n      // update position of scrollbar\n      imageList.addEventListener(\"scroll\", () => {\n        handleSlideButtons();\n      });\n    };\n    window.addEventListener(\"load\", initSlider);\n\n    // Cleanup event listeners on component unmount\n    return () => {\n      window.removeEventListener(\"load\", initSlider);\n      imageList.removeEventListener(\"scroll\", handleSlideButtons);\n    };\n  }, [typeOfMovie]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"movies-slider\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"one-button\",\n      children: categories.map((oneCategory, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"one-button\",\n        onClick: () => setTypeOfMovie(oneCategory),\n        children: oneCategory\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"slider-wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(FaArrowCircleLeft, {\n        id: \"prev-slide\",\n        className: \"arrow-button arrow-left\",\n        style: {\n          display: scrollLeft <= 0 ? \"none\" : \"block\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movies-list\",\n        children: vysledneFilmy.map(oneMovie => {\n          const {\n            id,\n            image\n          } = oneMovie;\n          return /*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"one-movie\",\n            src: image,\n            alt: \"movie-image\"\n          }, id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 32\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(FaArrowCircleRight, {\n        className: \"arrow-button arrow-right\",\n        style: {\n          display: scrollLeft >= maxScrollLeft ? \"none\" : \"block\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 9\n  }, this);\n};\n_s(MovieSlider, \"ld3tpZSFaYzJ09BuKVfsBgyvWlw=\");\n_c = MovieSlider;\nexport default MovieSlider;\nvar _c;\n$RefreshReg$(_c, \"MovieSlider\");","map":{"version":3,"names":["allMovies","useState","useEffect","categories","FaArrowCircleLeft","FaArrowCircleRight","jsxDEV","_jsxDEV","MovieSlider","props","_s","typeOfMovie","setTypeOfMovie","categoryOfMovies","scrollLeft","setScrollLeft","maxScrollLeft","setMaxScrollLeft","vysledneFilmy","filter","oneMovie","includes","imageList","document","querySelector","scrollWidth","clientWidth","handleSlideButtons","initSlider","slideButtons","querySelectorAll","forEach","button","addEventListener","direction","id","scrollAmount","scrollBy","left","behavior","window","removeEventListener","className","children","map","oneCategory","index","onClick","fileName","_jsxFileName","lineNumber","columnNumber","style","display","image","src","alt","_c","$RefreshReg$"],"sources":["/Users/lukasrucky/Documents/GitHub/netflix-project/src/components/MovieSlider.js"],"sourcesContent":["// import \"../components/MovieSlider.css\"\n// import allMovies from \"../data\"\n// import { useState } from \"react\"\n// import categories from \"./categories\"\n// import { FaArrowCircleLeft, FaArrowCircleRight } from 'react-icons/fa';\n\n// const MovieSlider = (props) => {\n//     const [typeOfMovie, setTypeOfMovie] = useState(props.categoryOfMovies)\n//     console.log(props);\n\n//     const vysledneFilmy = allMovies.filter((oneMovie) => {\n//         return oneMovie[\"category\"].includes(typeOfMovie)\n//     })\n    \n//     const initSlider = () => {\n//         const slideButtons = document.querySelectorAll(\".arrow-button\");\n//         const imageList = document.querySelector(\".movies-list\");\n//         const maxScrollLeft = imageList.scrollWidth - imageList.clientWidth;\n    \n//         // Slide images according to slide buttons click\n//         slideButtons.forEach(button => {\n//             button.addEventListener(\"click\", () => {\n//                 const direction = button.id === \"prev-slide\" ? -1 : 1;\n//                 const scrollAmount = imageList.clientWidth * direction;\n//                 imageList.scrollBy({ left: scrollAmount, behavior: \"smooth\"})\n//             })\n//         })\n//         // Hiding the buttons\n//         const handleSlideButtons = () => {\n//             slideButtons[0].style.display = imageList.scrollLeft <= 0 ? \"none\" : \"block\";\n//             slideButtons[1].style.display = imageList.scrollLeft >= maxScrollLeft ? \"none\" : \"block\";\n//         }\n//         // update position of scrollbar \n//         imageList.addEventListener(\"scroll\", () => {\n//             handleSlideButtons();\n//         })\n//     }\n\n//     window.addEventListener(\"load\", initSlider)\n\n//     return <div className=\"movies-slider\">\n//         <div className=\"one-button\">\n//             {\n//                 categories.filter((oneCategory, index) => {\n//                     return oneCategory === props.categoryOfMovies\n//                 })\n//                 // categories.map((oneCategory, index) => {\n//                 //     return <button className=\"one-button\" key={index} onClick={()=> setTypeOfMovie(oneCategory)}>{oneCategory}</button>\n//                 // })\n//             }\n//         </div>\n//         <div className=\"slider-wrapper\">\n//             <FaArrowCircleLeft id=\"prev-slide\" className=\"arrow-button arrow-left\"/>\n//             <div className=\"movies-list\">\n//                 {\n//                     vysledneFilmy.map((oneMovie) => {\n//                         const {id, image, title, age, tags, description, category} = oneMovie\n\n//                         return <img className=\"one-movie\" src={image} alt=\"movie-image\" key={id}/>\n//                     })\n//                 }\n//             </div>\n//             <FaArrowCircleRight className=\"arrow-button arrow-right\" />\n            \n//         </div>\n        \n//     </div>\n// }\n\n// export default MovieSlider\n\nimport \"../components/MovieSlider.css\";\nimport allMovies from \"../data\";\nimport { useState, useEffect } from \"react\";\nimport categories from \"./categories\";\nimport { FaArrowCircleLeft, FaArrowCircleRight } from 'react-icons/fa';\n\nconst MovieSlider = (props) => {\n    const [typeOfMovie, setTypeOfMovie] = useState(props.categoryOfMovies);\n    const [scrollLeft, setScrollLeft] = useState(0);\n    const [maxScrollLeft, setMaxScrollLeft] = useState(0);\n\n    const vysledneFilmy = allMovies.filter((oneMovie) => {\n        return oneMovie[\"category\"].includes(typeOfMovie);\n    });\n\n    useEffect(() => {\n        const imageList = document.querySelector(\".movies-list\");\n        setMaxScrollLeft(imageList.scrollWidth - imageList.clientWidth);\n\n        const handleSlideButtons = () => {\n            setScrollLeft(imageList.scrollLeft);\n        };\n\n        const initSlider = () => {\n            const slideButtons = document.querySelectorAll(\".arrow-button\");\n\n            slideButtons.forEach(button => {\n                button.addEventListener(\"click\", () => {\n                    const direction = button.id === \"prev-slide\" ? -1 : 1;\n                    const scrollAmount = imageList.clientWidth * direction;\n                    imageList.scrollBy({ left: scrollAmount, behavior: \"smooth\" });\n                });\n            });\n\n            // Hiding the buttons\n            handleSlideButtons();\n\n            // update position of scrollbar\n            imageList.addEventListener(\"scroll\", () => {\n                handleSlideButtons();\n            });\n        };\n\n        window.addEventListener(\"load\", initSlider);\n\n        // Cleanup event listeners on component unmount\n        return () => {\n            window.removeEventListener(\"load\", initSlider);\n            imageList.removeEventListener(\"scroll\", handleSlideButtons);\n        };\n    }, [typeOfMovie]);\n\n    return (\n        <div className=\"movies-slider\">\n            <div className=\"one-button\">\n                {categories.map((oneCategory, index) => (\n                    <button\n                        className=\"one-button\"\n                        key={index}\n                        onClick={() => setTypeOfMovie(oneCategory)}\n                    >\n                        {oneCategory}\n                    </button>\n                ))}\n            </div>\n            <div className=\"slider-wrapper\">\n                <FaArrowCircleLeft id=\"prev-slide\" className=\"arrow-button arrow-left\" style={{ display: scrollLeft <= 0 ? \"none\" : \"block\" }} />\n                <div className=\"movies-list\">\n                    {vysledneFilmy.map((oneMovie) => {\n                        const { id, image } = oneMovie;\n                        return <img className=\"one-movie\" src={image} alt=\"movie-image\" key={id} />;\n                    })}\n                </div>\n                <FaArrowCircleRight className=\"arrow-button arrow-right\" style={{ display: scrollLeft >= maxScrollLeft ? \"none\" : \"block\" }} />\n            </div>\n        </div>\n    );\n};\n\nexport default MovieSlider;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}