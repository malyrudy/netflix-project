{"ast":null,"code":"var _jsxFileName = \"/Users/lukasrucky/Documents/GitHub/netflix-project/src/components/MovieSlider.js\",\n  _s = $RefreshSig$();\nimport \"../components/MovieSlider.css\";\nimport allMovies from \"../data\";\nimport { useState } from \"react\";\nimport categories from \"./categories\";\nimport { FaArrowCircleLeft, FaArrowCircleRight } from 'react-icons/fa';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MovieSlider = props => {\n  _s();\n  const [typeOfMovie, setTypeOfMovie] = useState(props.categoryOfMovies);\n  console.log(props);\n  const vysledneFilmy = allMovies.filter(oneMovie => {\n    return oneMovie[\"category\"].includes(typeOfMovie);\n  });\n  const initSlider = () => {\n    const slideButtons = document.querySelectorAll(\".slide-button\");\n    const imageList = document.querySelector(\".arrow-button\");\n    const sliderScrollBar = document.querySelector(\".slider-scrollbar\");\n    const scrollbarThumb = sliderScrollBar.querySelector(\".scrollbar-thumb\");\n    const maxScrollLeft = imageList.scrollWidth - imageList.clientWidth;\n    scrollbarThumb.addEventListener(\"mousedown\", e => {\n      const startX = e.clientX;\n      const thumbPosition = scrollbarThumb.offsetLeft;\n\n      // Update thumb position on mouse move \n      const handleMouseMove = e => {\n        const deltaX = e.clientX - startX;\n        const newThumbPosition = thumbPosition + deltaX;\n        scrollbarThumb.style.left = `${newThumbPosition}px`;\n      };\n      const handleMouseUp = () => {\n        document.removeEventListener(\"mousemove\", handleMouseMove);\n        document.removeEventListener(\"mouseup\", handleMouseUp);\n      };\n\n      // Add event listeners for drag interaction\n      document.addEventListener(\"mousemove\", handleMouseMove);\n      document.addEventListener(\"mouseup\", handleMouseUp);\n    });\n\n    // Slide images according to slide buttons click\n    slideButtons.forEach(button => {\n      button.addEventListener(\"click\", () => {\n        const direction = button.id === \"prev-slide\" ? -1 : 1;\n        const scrollAmount = imageList.clientWidth * direction;\n        imageList.scrollBy({\n          left: scrollAmount,\n          behavior: \"smooth\"\n        });\n      });\n    });\n    // Hiding the buttons\n    const handleSlideButtons = () => {\n      slideButtons[0].style.display = imageList.scrollLeft <= 0 ? \"none\" : \"block\";\n      slideButtons[1].style.display = imageList.scrollLeft >= maxScrollLeft ? \"none\" : \"block\";\n    };\n    // update position of scrollbar \n    updateScrollThumbPosition = () => {\n      const scrollPosition = imageList.scrollLeft;\n      console.log(scrollPosition);\n      const thumbPosition = scrollPosition / maxScrollLeft * (sliderScrollBar.clientWidth - scrollbarThumb.offsetWidth);\n      scrollbarThumb.style.left = `${thumbPosition}px`;\n    };\n    imageList.addEventListener(\"scroll\", () => {\n      handleSlideButtons();\n      updateScrollThumbPosition();\n    });\n  };\n  window.addEventListener(\"load\", initSlider);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"movies-slider\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"one-button\",\n      children: categories.filter((oneCategory, index) => {\n        return oneCategory === props.categoryOfMovies;\n      })\n      // categories.map((oneCategory, index) => {\n      //     return <button className=\"one-button\" key={index} onClick={()=> setTypeOfMovie(oneCategory)}>{oneCategory}</button>\n      // })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"slider-wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(FaArrowCircleLeft, {\n        className: \"arrow-button arrow-left\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movies-list\",\n        children: vysledneFilmy.map(oneMovie => {\n          const {\n            id,\n            image,\n            title,\n            age,\n            tags,\n            description,\n            category\n          } = oneMovie;\n          return /*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"one-movie\",\n            src: image,\n            alt: \"movie-image\"\n          }, id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 32\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(FaArrowCircleRight, {\n        className: \"arrow-button arrow-right\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 12\n  }, this);\n};\n_s(MovieSlider, \"edcLYjbIgCPKMgJHzF/5JUQ8aHU=\");\n_c = MovieSlider;\nexport default MovieSlider;\nvar _c;\n$RefreshReg$(_c, \"MovieSlider\");","map":{"version":3,"names":["allMovies","useState","categories","FaArrowCircleLeft","FaArrowCircleRight","jsxDEV","_jsxDEV","MovieSlider","props","_s","typeOfMovie","setTypeOfMovie","categoryOfMovies","console","log","vysledneFilmy","filter","oneMovie","includes","initSlider","slideButtons","document","querySelectorAll","imageList","querySelector","sliderScrollBar","scrollbarThumb","maxScrollLeft","scrollWidth","clientWidth","addEventListener","e","startX","clientX","thumbPosition","offsetLeft","handleMouseMove","deltaX","newThumbPosition","style","left","handleMouseUp","removeEventListener","forEach","button","direction","id","scrollAmount","scrollBy","behavior","handleSlideButtons","display","scrollLeft","updateScrollThumbPosition","scrollPosition","offsetWidth","window","className","children","oneCategory","index","fileName","_jsxFileName","lineNumber","columnNumber","map","image","title","age","tags","description","category","src","alt","_c","$RefreshReg$"],"sources":["/Users/lukasrucky/Documents/GitHub/netflix-project/src/components/MovieSlider.js"],"sourcesContent":["import \"../components/MovieSlider.css\"\nimport allMovies from \"../data\"\nimport { useState } from \"react\"\nimport categories from \"./categories\"\nimport { FaArrowCircleLeft, FaArrowCircleRight } from 'react-icons/fa';\n\nconst MovieSlider = (props) => {\n    const [typeOfMovie, setTypeOfMovie] = useState(props.categoryOfMovies)\n    console.log(props);\n\n    const vysledneFilmy = allMovies.filter((oneMovie) => {\n        return oneMovie[\"category\"].includes(typeOfMovie)\n    })\n\n    const initSlider = () => {\n        const slideButtons = document.querySelectorAll(\".slide-button\");\n        const imageList = document.querySelector(\".arrow-button\");\n        const sliderScrollBar = document.querySelector(\".slider-scrollbar\")\n        const scrollbarThumb = sliderScrollBar.querySelector(\".scrollbar-thumb\");\n        const maxScrollLeft = imageList.scrollWidth - imageList.clientWidth;\n    \n        scrollbarThumb.addEventListener(\"mousedown\", (e) => {\n            const startX = e.clientX;\n            const thumbPosition = scrollbarThumb.offsetLeft;\n    \n            // Update thumb position on mouse move \n            const handleMouseMove = (e) => {\n                const deltaX = e.clientX - startX;\n                const newThumbPosition = thumbPosition + deltaX;\n                scrollbarThumb.style.left = `${newThumbPosition}px`;\n            }\n    \n            const handleMouseUp = () => {\n            document.removeEventListener(\"mousemove\", handleMouseMove);\n            document.removeEventListener(\"mouseup\", handleMouseUp);\n            }\n    \n            // Add event listeners for drag interaction\n            document.addEventListener(\"mousemove\", handleMouseMove);\n            document.addEventListener(\"mouseup\", handleMouseUp);\n        })\n    \n        // Slide images according to slide buttons click\n        slideButtons.forEach(button => {\n            button.addEventListener(\"click\", () => {\n                const direction = button.id === \"prev-slide\" ? -1 : 1;\n                const scrollAmount = imageList.clientWidth * direction;\n                imageList.scrollBy({ left: scrollAmount, behavior: \"smooth\"})\n            })\n        })\n        // Hiding the buttons\n        const handleSlideButtons = () => {\n            slideButtons[0].style.display = imageList.scrollLeft <= 0 ? \"none\" : \"block\";\n            slideButtons[1].style.display = imageList.scrollLeft >= maxScrollLeft ? \"none\" : \"block\";\n        }\n        // update position of scrollbar \n        updateScrollThumbPosition = () => {\n            const scrollPosition = imageList.scrollLeft;\n            console.log(scrollPosition);\n            const thumbPosition = (scrollPosition / maxScrollLeft) * (sliderScrollBar.clientWidth - scrollbarThumb.offsetWidth);\n            scrollbarThumb.style.left = `${thumbPosition}px`\n        }\n    \n        imageList.addEventListener(\"scroll\", () => {\n            handleSlideButtons();\n            updateScrollThumbPosition();\n        })\n    }\n\n    window.addEventListener(\"load\", initSlider)\n\n    return <div className=\"movies-slider\">\n        <div className=\"one-button\">\n            {\n                categories.filter((oneCategory, index) => {\n                    return oneCategory === props.categoryOfMovies\n                })\n                // categories.map((oneCategory, index) => {\n                //     return <button className=\"one-button\" key={index} onClick={()=> setTypeOfMovie(oneCategory)}>{oneCategory}</button>\n                // })\n            }\n        </div>\n        <div className=\"slider-wrapper\">\n            <FaArrowCircleLeft className=\"arrow-button arrow-left\"/>\n            <div className=\"movies-list\">\n                {\n                    vysledneFilmy.map((oneMovie) => {\n                        const {id, image, title, age, tags, description, category} = oneMovie\n\n                        return <img className=\"one-movie\" src={image} alt=\"movie-image\" key={id}/>\n                    })\n                }\n            </div>\n            <FaArrowCircleRight className=\"arrow-button arrow-right\" />\n        </div>\n        \n    </div>\n}\n\nexport default MovieSlider"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}